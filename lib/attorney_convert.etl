$LOAD_PATH.unshift(File.dirname(__FILE__))
require 'attorney_convert/csv_destination'
require 'attorney_convert/csv_source'
require 'ruby_postal/parser'
require 'date'
require 'active_support/inflector'

ENV['PROJECT_ROOT'] = File.expand_path(Dir.pwd)

input_csv_filename = ENV['CSV_FILE']

source CsvSource, input_csv_filename

class CsvAddress
  def initialize(raw_address)
    @raw_address = raw_address

    parsed_address = Postal::Parser.parse_address(@raw_address)
    # Comes out as a weird array format, we'll convert it to a hash
    parsed_address = Hash[parsed_address.map{|val| [val[:label], val[:value]]}]

    # See available attrs from the parser here: https://github.com/openvenues/libpostal#parser-labels
    # not all get filled out each time.
    @attrs = parsed_address
  end

  def attrib(name)

    val = @attrs[name]
    return val if val.to_s.strip == ""
    newval = val
    # If the attribute is the same text as it was in the raw address field,
    # then we can just use that original text so that the capitalization stays the same...
    if @raw_address =~ /(?:^|[^a-zA-Z0-9])(#{val.split("").join(",?")})(?:$|[^a-zA-Z0-9])/i
      newval = $1
    else
      newval = val.titleize
    end
    newval
  end

  def street_address
    join_with [address1, address2], ", "
  end

  def full_address
    join_with [street_address, city, state, postal_code], ", "
  end

  def address1
    join_with [attrib(:house_number), attrib(:road), attrib(:po_box), attrib(:suburb)], " "
  end

  def address2
    join_with [attrib(:level), attrib(:unit)], " "
  end

  def city
    join_with [attrib(:city_district), attrib(:city), attrib(:island)], " "
  end

  def state
    join_with [attrib(:state_district), attrib(:state)], ", "
  end

  def postal_code
    attrib(:postcode)
  end

  def house
    attrib(:house)
  end

  private

  def join_with(items, separator=", ")
    items.reject{|val| val.to_s.strip == ""}.join(separator)
  end
end

def parse_address_string(address)


  addr = CsvAddress.new(address)
  {
    company: addr.house,
    full_address: addr.full_address,
    address1: addr.address1,
    address2: addr.address2,
    city: addr.city,
    state: addr.state,
    postal_code: addr.postal_code
  }
end

# declare a row transform to process a given field
transform do |row|
  name_split = row[:name].to_s.split(' , ')
  row[:first_name] = name_split.pop
  # just in case there are extra commas in the name for whatever reason.
  row[:last_name] = name_split.join(' , ')

  row[:bar_year] = Date.parse(row[:bar_admission]).year if row[:bar_admission].to_s.strip != ""

  address_attrs = parse_address_string(row[:address])
  address_attrs.each do |column_name, val|
    row[column_name] = val
  end
  row
end

destination CsvDestination
